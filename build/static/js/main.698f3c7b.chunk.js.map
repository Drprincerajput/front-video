{"version":3,"sources":["routes/CreateRoom.js","routes/Room.js","App.js","serviceWorker.js","index.js"],"names":["CreateRoom","props","onClick","id","uuid","history","push","class","Room","userVideo","useRef","partnerVideo","peerRef","socketRef","otherUser","userStream","createPeer","userID","peer","RTCPeerConnection","iceServers","urls","credential","username","onicecandidate","handleICECandidateEvent","ontrack","handleTrackEvent","onnegotiationneeded","current","createOffer","then","offer","setLocalDescription","payload","target","caller","sdp","localDescription","emit","catch","e","console","log","handleNegotiationNeededEvent","handleRecieveCall","incoming","desc","RTCSessionDescription","setRemoteDescription","getTracks","forEach","track","addTrack","createAnswer","answer","handleAnswer","message","candidate","handleNewICECandidateMsg","RTCIceCandidate","addIceCandidate","srcObject","streams","useEffect","navigator","mediaDevices","getUserMedia","audio","video","stream","io","connect","match","params","roomID","on","callUser","autoPlay","ref","App","className","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.698f3c7b.chunk.js","sourcesContent":["// importing library\r\nimport React from \"react\";\r\n\r\n// for unique id\r\nimport { v1 as uuid } from \"uuid\";\r\n\r\n// creating room with unique id\r\n// localhost:3000/room/5\r\n\r\nconst CreateRoom = (props) => {\r\n  function create() {\r\n    const id = uuid();\r\n    props.history.push(`/room/${id}`);\r\n  }\r\n\r\n  return (\r\n    <button onClick={create} class=\"btn\">\r\n      {\" \"}\r\n      Create Room{\" \"}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default CreateRoom;\r\n","// importing hooks from library\r\nimport React, { useRef, useEffect } from \"react\";\r\nimport io from \"socket.io-client\";\r\n\r\n// creating ref for different use case\r\n\r\nconst Room = (props) => {\r\n  const userVideo = useRef();\r\n  const partnerVideo = useRef();\r\n  const peerRef = useRef();\r\n  const socketRef = useRef();\r\n  const otherUser = useRef();\r\n  const userStream = useRef();\r\n\r\n  useEffect(() => {\r\n    // asking for audio and webcam access\r\n    navigator.mediaDevices\r\n      .getUserMedia({ audio: true, video: true })\r\n      .then((stream) => {\r\n        userVideo.current.srcObject = stream;\r\n        userStream.current = stream;\r\n\r\n        // creating room from id\r\n        socketRef.current = io.connect(\"/\");\r\n        socketRef.current.emit(\"join room\", props.match.params.roomID);\r\n\r\n        // methods for handshaking\r\n\r\n        socketRef.current.on(\"other user\", (userID) => {\r\n          callUser(userID);\r\n          otherUser.current = userID;\r\n        });\r\n\r\n        socketRef.current.on(\"user joined\", (userID) => {\r\n          otherUser.current = userID;\r\n        });\r\n\r\n        socketRef.current.on(\"offer\", handleRecieveCall);\r\n\r\n        socketRef.current.on(\"answer\", handleAnswer);\r\n\r\n        socketRef.current.on(\"ice-candidate\", handleNewICECandidateMsg);\r\n      });\r\n  }, []);\r\n\r\n  // provinding data to peer for transisiting data for stream\r\n\r\n  function callUser(userID) {\r\n    peerRef.current = createPeer(userID);\r\n    userStream.current\r\n      .getTracks()\r\n      .forEach((track) => peerRef.current.addTrack(track, userStream.current));\r\n  }\r\n\r\n  // https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Signaling_and_video_calling\r\n\r\n  function createPeer(userID) {\r\n    const peer = new RTCPeerConnection({\r\n      iceServers: [\r\n        {\r\n          urls: \"stun:stun.stunprotocol.org\",\r\n        },\r\n        {\r\n          urls: \"turn:numb.viagenie.ca\",\r\n          credential: \"muazkh\",\r\n          username: \"webrtc@live.com\",\r\n        },\r\n      ],\r\n    });\r\n\r\n    peer.onicecandidate = handleICECandidateEvent;\r\n    peer.ontrack = handleTrackEvent;\r\n    peer.onnegotiationneeded = () => handleNegotiationNeededEvent(userID);\r\n\r\n    return peer;\r\n  }\r\n\r\n  // sending offer and getting answer\r\n\r\n  function handleNegotiationNeededEvent(userID) {\r\n    peerRef.current\r\n      .createOffer()\r\n      .then((offer) => {\r\n        return peerRef.current.setLocalDescription(offer);\r\n      })\r\n      .then(() => {\r\n        const payload = {\r\n          target: userID,\r\n          caller: socketRef.current.id,\r\n          // actual data sdp\r\n          sdp: peerRef.current.localDescription,\r\n        };\r\n        socketRef.current.emit(\"offer\", payload);\r\n      })\r\n      .catch((e) => console.log(e));\r\n  }\r\n\r\n  // handlung recieving call\r\n  function handleRecieveCall(incoming) {\r\n    peerRef.current = createPeer();\r\n    const desc = new RTCSessionDescription(incoming.sdp);\r\n    peerRef.current\r\n      .setRemoteDescription(desc)\r\n      .then(() => {\r\n        userStream.current\r\n          .getTracks()\r\n          .forEach((track) =>\r\n            peerRef.current.addTrack(track, userStream.current)\r\n          );\r\n      })\r\n      .then(() => {\r\n        return peerRef.current.createAnswer();\r\n      })\r\n      .then((answer) => {\r\n        return peerRef.current.setLocalDescription(answer);\r\n      })\r\n      .then(() => {\r\n        const payload = {\r\n          target: incoming.caller,\r\n          caller: socketRef.current.id,\r\n          sdp: peerRef.current.localDescription,\r\n        };\r\n        socketRef.current.emit(\"answer\", payload);\r\n      });\r\n  }\r\n\r\n  // having actuall handshaking by answering the call\r\n\r\n  function handleAnswer(message) {\r\n    const desc = new RTCSessionDescription(message.sdp);\r\n    peerRef.current.setRemoteDescription(desc).catch((e) => console.log(e));\r\n  }\r\n\r\n  // checking proper handshaking\r\n\r\n  function handleICECandidateEvent(e) {\r\n    if (e.candidate) {\r\n      const payload = {\r\n        target: otherUser.current,\r\n        candidate: e.candidate,\r\n      };\r\n      socketRef.current.emit(\"ice-candidate\", payload);\r\n    }\r\n  }\r\n\r\n  function handleNewICECandidateMsg(incoming) {\r\n    const candidate = new RTCIceCandidate(incoming);\r\n\r\n    peerRef.current.addIceCandidate(candidate).catch((e) => console.log(e));\r\n  }\r\n\r\n  // connecting partner ref to ours\r\n\r\n  function handleTrackEvent(e) {\r\n    partnerVideo.current.srcObject = e.streams[0];\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* this one for us */}\r\n      <video autoPlay ref={userVideo} />\r\n      {/* this one for other */}\r\n      <video autoPlay ref={partnerVideo} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Room;\r\n","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport CreateRoom from \"./routes/CreateRoom\";\r\nimport Room from \"./routes/Room\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={CreateRoom} />\r\n          <Route path=\"/room/:roomID\" component={Room} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}